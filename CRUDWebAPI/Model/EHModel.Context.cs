//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUDWebAPI.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EvolentHealthDBEntities : DbContext
    {
        public EvolentHealthDBEntities()
            : base("name=EvolentHealthDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ContactDetails> ContactDetails { get; set; }
    
        public virtual int DeleteContactDetail(Nullable<int> cId)
        {
            var cIdParameter = cId.HasValue ?
                new ObjectParameter("CId", cId) :
                new ObjectParameter("CId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteContactDetail", cIdParameter);
        }
    
        public virtual ObjectResult<GetAllContactDetails_Result> GetAllContactDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllContactDetails_Result>("GetAllContactDetails");
        }
    
        public virtual ObjectResult<GetContactDetailsById_Result> GetContactDetailsById(Nullable<int> cId)
        {
            var cIdParameter = cId.HasValue ?
                new ObjectParameter("CId", cId) :
                new ObjectParameter("CId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContactDetailsById_Result>("GetContactDetailsById", cIdParameter);
        }
    
        public virtual int InsertContactDetails(string fName, string lName, string email, string phoneNo)
        {
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertContactDetails", fNameParameter, lNameParameter, emailParameter, phoneNoParameter);
        }
    
        public virtual int UpdateContactDetails(Nullable<int> cId, string fName, string lName, string email, string phoneNo, Nullable<bool> statusMode)
        {
            var cIdParameter = cId.HasValue ?
                new ObjectParameter("CId", cId) :
                new ObjectParameter("CId", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var statusModeParameter = statusMode.HasValue ?
                new ObjectParameter("StatusMode", statusMode) :
                new ObjectParameter("StatusMode", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContactDetails", cIdParameter, fNameParameter, lNameParameter, emailParameter, phoneNoParameter, statusModeParameter);
        }
    }
}
